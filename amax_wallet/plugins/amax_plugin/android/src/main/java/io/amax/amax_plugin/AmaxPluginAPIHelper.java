// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.amax.amax_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AmaxPluginAPIHelper {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ClientOption {
    private @Nullable String baseUrl;

    public @Nullable String getBaseUrl() {
      return baseUrl;
    }

    public void setBaseUrl(@Nullable String setterArg) {
      this.baseUrl = setterArg;
    }

    private @Nullable Boolean enableDebug;

    public @Nullable Boolean getEnableDebug() {
      return enableDebug;
    }

    public void setEnableDebug(@Nullable Boolean setterArg) {
      this.enableDebug = setterArg;
    }

    public static final class Builder {

      private @Nullable String baseUrl;

      public @NonNull Builder setBaseUrl(@Nullable String setterArg) {
        this.baseUrl = setterArg;
        return this;
      }

      private @Nullable Boolean enableDebug;

      public @NonNull Builder setEnableDebug(@Nullable Boolean setterArg) {
        this.enableDebug = setterArg;
        return this;
      }

      public @NonNull ClientOption build() {
        ClientOption pigeonReturn = new ClientOption();
        pigeonReturn.setBaseUrl(baseUrl);
        pigeonReturn.setEnableDebug(enableDebug);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(baseUrl);
      toListResult.add(enableDebug);
      return toListResult;
    }

    static @NonNull ClientOption fromList(@NonNull ArrayList<Object> list) {
      ClientOption pigeonResult = new ClientOption();
      Object baseUrl = list.get(0);
      pigeonResult.setBaseUrl((String) baseUrl);
      Object enableDebug = list.get(1);
      pigeonResult.setEnableDebug((Boolean) enableDebug);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Trx {
    private @Nullable Long clientId;

    public @Nullable Long getClientId() {
      return clientId;
    }

    public void setClientId(@Nullable Long setterArg) {
      this.clientId = setterArg;
    }

    private @Nullable Long expiresSeconds;

    public @Nullable Long getExpiresSeconds() {
      return expiresSeconds;
    }

    public void setExpiresSeconds(@Nullable Long setterArg) {
      this.expiresSeconds = setterArg;
    }

    private @Nullable Long blocksBehind;

    public @Nullable Long getBlocksBehind() {
      return blocksBehind;
    }

    public void setBlocksBehind(@Nullable Long setterArg) {
      this.blocksBehind = setterArg;
    }

    private @Nullable Boolean useLastIrreversible;

    public @Nullable Boolean getUseLastIrreversible() {
      return useLastIrreversible;
    }

    public void setUseLastIrreversible(@Nullable Boolean setterArg) {
      this.useLastIrreversible = setterArg;
    }

    private @Nullable List<TrxAction> actions;

    public @Nullable List<TrxAction> getActions() {
      return actions;
    }

    public void setActions(@Nullable List<TrxAction> setterArg) {
      this.actions = setterArg;
    }

    public static final class Builder {

      private @Nullable Long clientId;

      public @NonNull Builder setClientId(@Nullable Long setterArg) {
        this.clientId = setterArg;
        return this;
      }

      private @Nullable Long expiresSeconds;

      public @NonNull Builder setExpiresSeconds(@Nullable Long setterArg) {
        this.expiresSeconds = setterArg;
        return this;
      }

      private @Nullable Long blocksBehind;

      public @NonNull Builder setBlocksBehind(@Nullable Long setterArg) {
        this.blocksBehind = setterArg;
        return this;
      }

      private @Nullable Boolean useLastIrreversible;

      public @NonNull Builder setUseLastIrreversible(@Nullable Boolean setterArg) {
        this.useLastIrreversible = setterArg;
        return this;
      }

      private @Nullable List<TrxAction> actions;

      public @NonNull Builder setActions(@Nullable List<TrxAction> setterArg) {
        this.actions = setterArg;
        return this;
      }

      public @NonNull Trx build() {
        Trx pigeonReturn = new Trx();
        pigeonReturn.setClientId(clientId);
        pigeonReturn.setExpiresSeconds(expiresSeconds);
        pigeonReturn.setBlocksBehind(blocksBehind);
        pigeonReturn.setUseLastIrreversible(useLastIrreversible);
        pigeonReturn.setActions(actions);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(clientId);
      toListResult.add(expiresSeconds);
      toListResult.add(blocksBehind);
      toListResult.add(useLastIrreversible);
      toListResult.add(actions);
      return toListResult;
    }

    static @NonNull Trx fromList(@NonNull ArrayList<Object> list) {
      Trx pigeonResult = new Trx();
      Object clientId = list.get(0);
      pigeonResult.setClientId((clientId == null) ? null : ((clientId instanceof Integer) ? (Integer) clientId : (Long) clientId));
      Object expiresSeconds = list.get(1);
      pigeonResult.setExpiresSeconds((expiresSeconds == null) ? null : ((expiresSeconds instanceof Integer) ? (Integer) expiresSeconds : (Long) expiresSeconds));
      Object blocksBehind = list.get(2);
      pigeonResult.setBlocksBehind((blocksBehind == null) ? null : ((blocksBehind instanceof Integer) ? (Integer) blocksBehind : (Long) blocksBehind));
      Object useLastIrreversible = list.get(3);
      pigeonResult.setUseLastIrreversible((Boolean) useLastIrreversible);
      Object actions = list.get(4);
      pigeonResult.setActions((List<TrxAction>) actions);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TrxAction {
    private @Nullable String account;

    public @Nullable String getAccount() {
      return account;
    }

    public void setAccount(@Nullable String setterArg) {
      this.account = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable List<TrxAuth> authorization;

    public @Nullable List<TrxAuth> getAuthorization() {
      return authorization;
    }

    public void setAuthorization(@Nullable List<TrxAuth> setterArg) {
      this.authorization = setterArg;
    }

    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    private @Nullable Boolean isContextFree;

    public @Nullable Boolean getIsContextFree() {
      return isContextFree;
    }

    public void setIsContextFree(@Nullable Boolean setterArg) {
      this.isContextFree = setterArg;
    }

    public static final class Builder {

      private @Nullable String account;

      public @NonNull Builder setAccount(@Nullable String setterArg) {
        this.account = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable List<TrxAuth> authorization;

      public @NonNull Builder setAuthorization(@Nullable List<TrxAuth> setterArg) {
        this.authorization = setterArg;
        return this;
      }

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable Boolean isContextFree;

      public @NonNull Builder setIsContextFree(@Nullable Boolean setterArg) {
        this.isContextFree = setterArg;
        return this;
      }

      public @NonNull TrxAction build() {
        TrxAction pigeonReturn = new TrxAction();
        pigeonReturn.setAccount(account);
        pigeonReturn.setName(name);
        pigeonReturn.setAuthorization(authorization);
        pigeonReturn.setData(data);
        pigeonReturn.setIsContextFree(isContextFree);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(account);
      toListResult.add(name);
      toListResult.add(authorization);
      toListResult.add(data);
      toListResult.add(isContextFree);
      return toListResult;
    }

    static @NonNull TrxAction fromList(@NonNull ArrayList<Object> list) {
      TrxAction pigeonResult = new TrxAction();
      Object account = list.get(0);
      pigeonResult.setAccount((String) account);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object authorization = list.get(2);
      pigeonResult.setAuthorization((List<TrxAuth>) authorization);
      Object data = list.get(3);
      pigeonResult.setData((String) data);
      Object isContextFree = list.get(4);
      pigeonResult.setIsContextFree((Boolean) isContextFree);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class TrxAuth {
    private @Nullable String actor;

    public @Nullable String getActor() {
      return actor;
    }

    public void setActor(@Nullable String setterArg) {
      this.actor = setterArg;
    }

    private @Nullable String permission;

    public @Nullable String getPermission() {
      return permission;
    }

    public void setPermission(@Nullable String setterArg) {
      this.permission = setterArg;
    }

    public static final class Builder {

      private @Nullable String actor;

      public @NonNull Builder setActor(@Nullable String setterArg) {
        this.actor = setterArg;
        return this;
      }

      private @Nullable String permission;

      public @NonNull Builder setPermission(@Nullable String setterArg) {
        this.permission = setterArg;
        return this;
      }

      public @NonNull TrxAuth build() {
        TrxAuth pigeonReturn = new TrxAuth();
        pigeonReturn.setActor(actor);
        pigeonReturn.setPermission(permission);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(actor);
      toListResult.add(permission);
      return toListResult;
    }

    static @NonNull TrxAuth fromList(@NonNull ArrayList<Object> list) {
      TrxAuth pigeonResult = new TrxAuth();
      Object actor = list.get(0);
      pigeonResult.setActor((String) actor);
      Object permission = list.get(1);
      pigeonResult.setPermission((String) permission);
      return pigeonResult;
    }
  }

  private static class AmaxPluginAPICodec extends StandardMessageCodec {
    public static final AmaxPluginAPICodec INSTANCE = new AmaxPluginAPICodec();

    private AmaxPluginAPICodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ClientOption.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return Trx.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return TrxAction.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return TrxAuth.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ClientOption) {
        stream.write(128);
        writeValue(stream, ((ClientOption) value).toList());
      } else if (value instanceof Trx) {
        stream.write(129);
        writeValue(stream, ((Trx) value).toList());
      } else if (value instanceof TrxAction) {
        stream.write(130);
        writeValue(stream, ((TrxAction) value).toList());
      } else if (value instanceof TrxAuth) {
        stream.write(131);
        writeValue(stream, ((TrxAuth) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AmaxPluginAPI {

    @NonNull 
    Long createClient(@NonNull ClientOption option);

    void releaseClient(@NonNull Long clientId);

    void transfer(@NonNull Long clientId, @NonNull String from, @NonNull String to, @NonNull String quantity, @NonNull String memo);

    void buyRam(@NonNull Long clientId, @NonNull String payer, @NonNull String receiver, @NonNull Long bytes);

    void stakeCpuAndNet(@NonNull Long clientId, @NonNull String from, @NonNull String receiver, @NonNull String cpuQuantity, @NonNull String netQuantity, @NonNull Boolean transfer);

    void sendTransaction(@NonNull Trx trx);

    /** The codec used by AmaxPluginAPI. */
    static MessageCodec<Object> getCodec() {
      return AmaxPluginAPICodec.INSTANCE;
    }
    /**Sets up an instance of `AmaxPluginAPI` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AmaxPluginAPI api) {
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.createClient", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  ClientOption optionArg = (ClientOption) args.get(0);
                  if (optionArg == null) {
                    throw new NullPointerException("optionArg unexpectedly null.");
                  }
                  Long output = api.createClient(optionArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.releaseClient", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number clientIdArg = (Number) args.get(0);
                  if (clientIdArg == null) {
                    throw new NullPointerException("clientIdArg unexpectedly null.");
                  }
                  api.releaseClient((clientIdArg == null) ? null : clientIdArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.transfer", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number clientIdArg = (Number) args.get(0);
                  if (clientIdArg == null) {
                    throw new NullPointerException("clientIdArg unexpectedly null.");
                  }
                  String fromArg = (String) args.get(1);
                  if (fromArg == null) {
                    throw new NullPointerException("fromArg unexpectedly null.");
                  }
                  String toArg = (String) args.get(2);
                  if (toArg == null) {
                    throw new NullPointerException("toArg unexpectedly null.");
                  }
                  String quantityArg = (String) args.get(3);
                  if (quantityArg == null) {
                    throw new NullPointerException("quantityArg unexpectedly null.");
                  }
                  String memoArg = (String) args.get(4);
                  if (memoArg == null) {
                    throw new NullPointerException("memoArg unexpectedly null.");
                  }
                  api.transfer((clientIdArg == null) ? null : clientIdArg.longValue(), fromArg, toArg, quantityArg, memoArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.buyRam", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number clientIdArg = (Number) args.get(0);
                  if (clientIdArg == null) {
                    throw new NullPointerException("clientIdArg unexpectedly null.");
                  }
                  String payerArg = (String) args.get(1);
                  if (payerArg == null) {
                    throw new NullPointerException("payerArg unexpectedly null.");
                  }
                  String receiverArg = (String) args.get(2);
                  if (receiverArg == null) {
                    throw new NullPointerException("receiverArg unexpectedly null.");
                  }
                  Number bytesArg = (Number) args.get(3);
                  if (bytesArg == null) {
                    throw new NullPointerException("bytesArg unexpectedly null.");
                  }
                  api.buyRam((clientIdArg == null) ? null : clientIdArg.longValue(), payerArg, receiverArg, (bytesArg == null) ? null : bytesArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.stakeCpuAndNet", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number clientIdArg = (Number) args.get(0);
                  if (clientIdArg == null) {
                    throw new NullPointerException("clientIdArg unexpectedly null.");
                  }
                  String fromArg = (String) args.get(1);
                  if (fromArg == null) {
                    throw new NullPointerException("fromArg unexpectedly null.");
                  }
                  String receiverArg = (String) args.get(2);
                  if (receiverArg == null) {
                    throw new NullPointerException("receiverArg unexpectedly null.");
                  }
                  String cpuQuantityArg = (String) args.get(3);
                  if (cpuQuantityArg == null) {
                    throw new NullPointerException("cpuQuantityArg unexpectedly null.");
                  }
                  String netQuantityArg = (String) args.get(4);
                  if (netQuantityArg == null) {
                    throw new NullPointerException("netQuantityArg unexpectedly null.");
                  }
                  Boolean transferArg = (Boolean) args.get(5);
                  if (transferArg == null) {
                    throw new NullPointerException("transferArg unexpectedly null.");
                  }
                  api.stakeCpuAndNet((clientIdArg == null) ? null : clientIdArg.longValue(), fromArg, receiverArg, cpuQuantityArg, netQuantityArg, transferArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BinaryMessenger.TaskQueue taskQueue = binaryMessenger.makeBackgroundTaskQueue();
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.AmaxPluginAPI.sendTransaction", getCodec(), taskQueue);
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Trx trxArg = (Trx) args.get(0);
                  if (trxArg == null) {
                    throw new NullPointerException("trxArg unexpectedly null.");
                  }
                  api.sendTransaction(trxArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}

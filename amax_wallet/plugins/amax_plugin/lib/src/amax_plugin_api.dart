// Autogenerated from Pigeon (v9.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ClientOption {
  ClientOption({
    this.baseUrl,
    this.enableDebug,
  });

  String? baseUrl;

  bool? enableDebug;

  Object encode() {
    return <Object?>[
      baseUrl,
      enableDebug,
    ];
  }

  static ClientOption decode(Object result) {
    result as List<Object?>;
    return ClientOption(
      baseUrl: result[0] as String?,
      enableDebug: result[1] as bool?,
    );
  }
}

class Trx {
  Trx({
    this.clientId,
    this.expiresSeconds,
    this.blocksBehind,
    this.useLastIrreversible,
    this.actions,
  });

  int? clientId;

  int? expiresSeconds;

  int? blocksBehind;

  bool? useLastIrreversible;

  List<TrxAction?>? actions;

  Object encode() {
    return <Object?>[
      clientId,
      expiresSeconds,
      blocksBehind,
      useLastIrreversible,
      actions,
    ];
  }

  static Trx decode(Object result) {
    result as List<Object?>;
    return Trx(
      clientId: result[0] as int?,
      expiresSeconds: result[1] as int?,
      blocksBehind: result[2] as int?,
      useLastIrreversible: result[3] as bool?,
      actions: (result[4] as List<Object?>?)?.cast<TrxAction?>(),
    );
  }
}

class TrxAction {
  TrxAction({
    this.account,
    this.name,
    this.authorization,
    this.data,
    this.isContextFree,
  });

  String? account;

  String? name;

  List<TrxAuth?>? authorization;

  String? data;

  bool? isContextFree;

  Object encode() {
    return <Object?>[
      account,
      name,
      authorization,
      data,
      isContextFree,
    ];
  }

  static TrxAction decode(Object result) {
    result as List<Object?>;
    return TrxAction(
      account: result[0] as String?,
      name: result[1] as String?,
      authorization: (result[2] as List<Object?>?)?.cast<TrxAuth?>(),
      data: result[3] as String?,
      isContextFree: result[4] as bool?,
    );
  }
}

class TrxAuth {
  TrxAuth({
    this.actor,
    this.permission,
  });

  String? actor;

  String? permission;

  Object encode() {
    return <Object?>[
      actor,
      permission,
    ];
  }

  static TrxAuth decode(Object result) {
    result as List<Object?>;
    return TrxAuth(
      actor: result[0] as String?,
      permission: result[1] as String?,
    );
  }
}

class _AmaxPluginAPICodec extends StandardMessageCodec {
  const _AmaxPluginAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ClientOption) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is Trx) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is TrxAction) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is TrxAuth) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ClientOption.decode(readValue(buffer)!);
      case 129: 
        return Trx.decode(readValue(buffer)!);
      case 130: 
        return TrxAction.decode(readValue(buffer)!);
      case 131: 
        return TrxAuth.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AmaxPluginAPI {
  /// Constructor for [AmaxPluginAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AmaxPluginAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AmaxPluginAPICodec();

  Future<int> createClient(ClientOption arg_option) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.createClient', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_option]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> releaseClient(int arg_clientId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.releaseClient', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_clientId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> transfer(int arg_clientId, String arg_from, String arg_to, String arg_quantity, String arg_memo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.transfer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_clientId, arg_from, arg_to, arg_quantity, arg_memo]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> buyRam(int arg_clientId, String arg_payer, String arg_receiver, int arg_bytes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.buyRam', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_clientId, arg_payer, arg_receiver, arg_bytes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stakeCpuAndNet(int arg_clientId, String arg_from, String arg_receiver, String arg_cpuQuantity, String arg_netQuantity, bool arg_transfer) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.stakeCpuAndNet', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_clientId, arg_from, arg_receiver, arg_cpuQuantity, arg_netQuantity, arg_transfer]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendTransaction(Trx arg_trx) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AmaxPluginAPI.sendTransaction', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_trx]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
